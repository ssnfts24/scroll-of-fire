/* === Scroll of Fire â€” Codex.js ============================================ */
(function () {
  "use strict";
  const $=(s,r=document)=>r.querySelector(s);
  const $$=(s,r=document)=>Array.from(r.querySelectorAll(s));
  const prefersReduced=matchMedia("(prefers-reduced-motion: reduce)").matches;

  const inViewport=(el,thr=0.9)=>{const r=el.getBoundingClientRect();const vh=window.innerHeight||document.documentElement.clientHeight;return r.top<vh*thr&&r.bottom>0;};

  function setYear(){const y=$("#yr"); if(y) y.textContent=String(new Date().getFullYear());}
  function hardenExternal(){ $$('a[target="_blank"]').forEach(a=>{const rel=(a.getAttribute("rel")||"").toLowerCase(); if(!rel.includes("noopener")) a.setAttribute("rel",(rel?rel+" ":"")+"noopener");}); }

  function initBanner(){
    const img=$("#heroBanner"); if(!img) return;
    const remote=img.getAttribute("data-src-raw"); if(!remote) return;
    const ua=navigator.userAgent||""; const isMeta=/FBAN|FBAV|Facebook|Instagram|FB_IAB|FBAN\/Messenger/i.test(ua);
    if(isMeta) return; // stick with local image in in-app browsers

    const probe=new Image(); probe.decoding="async"; probe.loading="eager"; probe.src=remote;
    probe.addEventListener("load",()=>{ img.src=remote; },{once:true});
    // if it errors, we keep local silently
  }

  function typesetSoon(){ if(!window.MathJax) return; try{ window.MathJax.typeset && window.MathJax.typeset(); }catch(_){} }

  function revealOnScroll(){
    const t=$$(".card"); if(!t.length) return;
    if(!prefersReduced && "IntersectionObserver" in window){
      const io=new IntersectionObserver(es=>{ for(const e of es){ if(e.isIntersecting){ e.target.classList.add("visible"); io.unobserve(e.target); } } },{root:null,rootMargin:"0px 0px -12%"});
      t.forEach(el=>io.observe(el));
    }else{
      const tick=()=>t.forEach(el=>inViewport(el)&&el.classList.add("visible"));
      let ticking=false; const onS=()=>{ if(!ticking){ ticking=true; requestAnimationFrame(()=>{ tick(); ticking=false; }); } };
      window.addEventListener("scroll",onS,{passive:true}); window.addEventListener("load",tick); tick();
    }
  }

  function activateEquations(){
    const eqs=$$(".eq"); if(!eqs.length) return;
    const act=el=>{ if(!el.classList.contains("eq-on")){ el.classList.add("eq-on"); setTimeout(typesetSoon,80); } };
    if(!prefersReduced && "IntersectionObserver" in window){
      const io=new IntersectionObserver(es=>{ for(const e of es){ if(e.isIntersecting){ act(e.target); io.unobserve(e.target); } } },{root:null,rootMargin:"0px 0px -10%"});
      eqs.forEach(el=>io.observe(el));
    }else{
      const tick=()=>eqs.forEach(el=>inViewport(el,0.94)&&act(el));
      let ticking=false; const onS=()=>{ if(!ticking){ ticking=true; requestAnimationFrame(()=>{ tick(); ticking=false; }); } };
      window.addEventListener("scroll",onS,{passive:true}); window.addEventListener("load",tick); tick();
    }
  }

  function tiltCards(){
    if(prefersReduced) return;
    $$(".card").forEach(card=>{
      let raf=0;
      const onMove=e=>{
        const r=card.getBoundingClientRect(); const x=(e.clientX-r.left)/r.width; const y=(e.clientY-r.top)/r.height;
        cancelAnimationFrame(raf);
        raf=requestAnimationFrame(()=>{ const rx=(0.5-y)*4; const ry=(x-0.5)*6; card.style.transform=`perspective(900px) rotateX(${rx}deg) rotateY(${ry}deg) translateZ(0)`; });
      };
      const reset=()=>card.style.transform="";
      card.addEventListener("mousemove",onMove);
      card.addEventListener("mouseleave",reset);
      card.addEventListener("blur",reset,true);
    });
  }

  document.addEventListener("DOMContentLoaded",()=>{
    setYear();
    hardenExternal();
    initBanner();
    revealOnScroll();
    activateEquations();
    tiltCards();
    setTimeout(typesetSoon,250);
  });
})();
